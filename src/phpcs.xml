<?xml version="1.0"?>
<ruleset>
    <!-- Ensures that array are indented one tab stop. -->
    <rule ref="Generic.Arrays.ArrayIndent">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Bans the use of the PHP long array syntax. -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Detects variable assignments being made within conditions. -->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/>

    <!-- Checks against empty PHP statements. -->
    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>

    <!-- This sniff class detected empty statement. -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>

    <!-- Detects for-loops that can be simplified to a while-loop. -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>

    <!-- Detects for-loops that use a function call in the test expression. -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

    <!-- Detects incrementer jumbling in for loops. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <!-- Detects unconditional if- and elseif-statements. -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <!-- Detects unnecessary final modifiers inside of final classes. -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Checks for unused function parameters. -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>

    <!-- Detects unnecessary overridden methods that simply call their parent. -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- Verifies that inline control statements are not present. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- A simple sniff for detecting BOMs that may corrupt application work. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Ensures the whole file is PHP only, with no whitespace or inline HTML. -->
    <rule ref="Generic.Files.InlineHTML">
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>

    <!-- Checks that all file names are lowercased. -->
    <rule ref="Generic.Files.LowercasedFilename">
        <include-pattern>*/Views/*</include-pattern>
    </rule>

    <!-- Ensures each statement is on a line by itself. -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!-- Checks alignment of assignments. -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="50"/>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Ensures there is no space after cast tokens. -->
    <rule ref="Generic.Formatting.NoSpaceAfterCast"/>

    <!-- Checks that calls to methods and functions are spaced correctly. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

    <!-- Checks that the opening brace of a function is on the line after the function declaration. -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman">
        <properties>
            <property name="checkFunctions" value="true"/>
            <property name="checkClosures" value="true"/>
        </properties>
    </rule>

    <!-- Checks the cyclomatic complexity (McCabe) for functions. -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="10"/>
            <property name="absoluteComplexity" value="20"/>
        </properties>
    </rule>

    <!-- Checks the nesting level for methods. -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="5"/>
            <property name="absoluteNestingLevel" value="10"/>
        </properties>
    </rule>

    <!-- Ensures method and functions are named correctly. -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <property name="strict" value="true"/>
        </properties>
    </rule>

    <!-- Bans PHP 4 style constructors. -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>

    <!-- Ensures that constant names are all uppercase. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- Bans the use of the backtick execution operator. -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- Checks that the opening PHP tag is the first content in a file. -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag">
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>

    <!-- Discourages the use of deprecated PHP functions. -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Verifies that no alternative PHP tags are used. -->
    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

    <!-- Discourages the use of alias functions. -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset"/>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Checks that all uses of true, false and null are lowercase. -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Checks that all PHP keywords are lowercase. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- Checks that all PHP types are lowercase. -->
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Throws an error or warning when any code prefixed with an asperand is encountered. -->
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Checks that the strict_types has been declared. -->
    <rule ref="Generic.PHP.RequireStrictTypes">
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>

    <!-- Ensures the PHP_SAPI constant is used instead of php_sapi_name(). -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Ensures PHP believes the syntax is clean. -->
    <rule ref="Generic.PHP.Syntax"/>

    <!-- Check & fix whitespace on the inside of arbitrary parentheses. -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="spacing" value="0"/>
            <property name="ignoreNewlines" value="false"/>
        </properties>
    </rule>

    <!-- Throws errors if tabs are used for indentation. -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- Verifies spacing between variables and increment/decrement operators. -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- Ensures all language constructs contain a single space between themselves and their content. -->
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Checks that control structures are defined and indented correctly. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="indent" value="4"/>
            <property name="exact" value="false"/>
            <property name="tabIndent" value="false"/>
            <property name="ignoreIndentationTokens" type="array" value=""/>
        </properties>
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>

    <!-- Parses and verifies the doc comments for functions. -->
    <rule ref="PEAR.Commenting.FunctionComment"/>

    <!-- Checks that no Perl-style comments are used. -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Ensure multi-line IF conditions are defined correctly. -->
    <rule ref="PEAR.ControlStructures.MultiLineCondition">
        <properties>
            <property name="indent" value="4"/>
        </properties>
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>

    <!-- Ensure include_once is used in conditional situations and require_once is used elsewhere. -->
    <rule ref="PEAR.Files.IncludingFile"/>

    <!-- Ensures function params with default values are at the end of the declaration. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Checks that object operators are indented correctly. -->
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Checks that the closing braces of scopes are aligned correctly. -->
    <rule ref="PEAR.WhiteSpace.ScopeClosingBrace">
        <properties>
            <property name="indent" value="4"/>
        </properties>
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>

    <!-- Checks the declaration of the class is correct. -->
    <rule ref="PSR1.Classes.ClassDeclaration"/>

    <!-- Ensures a file declares new symbols and causes no other side effects, or executes logic with side effects, but not both. -->
    <rule ref="PSR1.Files.SideEffects"/>

    <!-- Ensures method names are defined using camel case. -->
    <rule ref="PSR1.Methods.CamelCapsMethodName"/>

    <!-- Checks the declaration of the class and its inheritance is correct. -->
    <rule ref="PSR2.Classes.ClassDeclaration">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Verifies that properties are declared correctly. -->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!-- Checks that control structures have the correct spacing around brackets. -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <!-- Verifies that there are no else if statements (elseif should be used instead). -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>

    <!-- Ensures all switch statements are defined correctly. -->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration">
        <properties>
            <property name="indent" value="4"/>
        </properties>
    </rule>

    <!-- Checks that the file does not end with a closing tag. -->
    <rule ref="PSR2.Files.ClosingTag"/>

    <!-- Ensures the file ends with a newline character. -->
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!-- Checks that the function call format is correct. -->
    <rule ref="PSR2.Methods.FunctionCallSignature">
        <properties>
            <property name="indent" value="4"/>
            <property name="allowMultipleArguments" value="false"/>
            <property name="requiredSpacesAfterOpen" value="0"/>
            <property name="requiredSpacesBeforeClose" value="0"/>
        </properties>
    </rule>

    <!-- Checks that the closing brace of a function goes directly after the body. -->
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>

    <!-- Checks that the method declaration is correct. -->
    <rule ref="PSR2.Methods.MethodDeclaration"/>

    <!-- Ensures namespaces are declared correctly. -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration"/>

    <!-- Verifies that classes are instantiated with parentheses. -->
    <rule ref="PSR12.Classes.ClassInstantiation"/>

    <!-- Checks the format of the declare statements. -->
    <rule ref="PSR12.Files.DeclareStatement"/>

    <!-- Verifies that nullable typehints are lacking superfluous whitespace. -->
    <rule ref="PSR12.Functions.NullableTypeDeclaration"/>

    <!-- Verifies that the short form of type keywords is used. -->
    <rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>

    <!-- Verifies that compound namespaces are not defined too deep. -->
    <rule ref="PSR12.Namespaces.CompoundNamespaceDepth">
        <properties>
            <property name="maxDepth" value="2"/>
        </properties>
    </rule>

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="PSR12.Operators.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="false"/>
            <property name="ignoreSpacingBeforeAssignments" value="true"/>
        </properties>
    </rule>

    <!-- Ensure that there are no spaces around square brackets. -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!-- Tests self member references. -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <!-- Tests that the stars in a doc comment align correctly. -->
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>

    <!-- Checks for empty catch clause without a comment. -->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>

    <!-- Verifies that a @throws tag exists for each exception type a function throws. -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag"/>

    <!-- Checks to ensure that there are no comments after statements. -->
    <rule ref="Squiz.Commenting.PostStatementComment"/>

    <!-- Checks that duplicate arguments are not used in function declarations. -->
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

    <!-- Checks the naming of variables and member variables. -->
    <rule ref="Squiz.NamingConventions.ValidVariableName"/>

    <!-- Ensures that the ++ operators are used when possible. -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>

    <!-- Ensures logical operators 'and' and 'or' are not used. -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!-- Warn about commented out code. -->
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="35"/>
        </properties>
    </rule>

    <!-- Ensures there is only one assignment on a line, and that it is the first thing on the line. -->
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>

    <!-- Discourages the use of debug functions. -->
    <rule ref="Squiz.PHP.DiscouragedFunctions">
        <properties>
            <property name="error" value="false"/>
        </properties>
    </rule>

    <!-- Checks the indentation of embedded PHP code segments. -->
    <rule ref="Squiz.PHP.EmbeddedPhp"/>

    <!-- The use of eval() is discouraged. -->
    <rule ref="Squiz.PHP.Eval"/>

    <!-- Stops the usage of the "global" keyword. -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>

    <!-- Bans the use of heredocs and nowdocs. -->
    <rule ref="Squiz.PHP.Heredoc"/>

    <!-- Ensures that functions within functions are never used. -->
    <rule ref="Squiz.PHP.InnerFunctions"/>

    <!-- Ensures all calls to inbuilt PHP functions are lowercase. -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <!-- Warns about code that can never been executed. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- Checks for usage of $this in static methods, which will cause runtime errors. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- Makes sure that any use of double quotes strings are warranted. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>

    <!-- Makes sure that any strings that are "echoed" are not enclosed in brackets. -->
    <rule ref="Squiz.Strings.EchoedStrings"/>

    <!-- Checks that there is no empty line after the opening brace of a function. -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Ensures all language constructs contain a single space between themselves and their content. -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>

    <!-- Verifies that class members are spaced correctly. -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="0"/>
        </properties>
    </rule>

    <!-- Ensure there is no whitespace before/after an object operator. -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Verifies that operators have valid spacing surrounding them. -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="false"/>
            <property name="ignoreSpacingBeforeAssignments" value="true"/>
        </properties>
    </rule>

    <!-- Ensure there is a single space after scope keywords. -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Ensure there is no whitespace before a semicolon. -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Checks for unneeded whitespace. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

    <!-- Exclude no PHP code. -->
    <rule ref="Internal.NoCodeFound">
        <exclude-pattern>*/Views/*</exclude-pattern>
    </rule>
</ruleset>
